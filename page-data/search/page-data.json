{"componentChunkName":"component---src-pages-search-jsx","path":"/search/","result":{"data":{"allMarkdownRemark":{"nodes":[{"excerpt":"Frappe Framework 설치 : Ubuntu 22.04기준 1. 필수 프로그램 설치 1.1. apt repository 업데이트 1.2. 파이썬 Repo 설치 1.3. 파이썬 설치 3.10 1.4. PIP 설치 1.5. 파이썬 가상환경 설치 1.6. 마리아 DB 설치 1.7. 레디스 서버 설치 1.8. Nodejs 설치 1.9. Yarn 패키지 관…","fields":{"slug":"/frappe-installation/"},"frontmatter":{"date":"October 21, 2023","title":"Frappe 설치","tags":["frappe"]},"rawMarkdownBody":"\n\n# Frappe Framework 설치 : Ubuntu 22.04기준\n\n# 1. 필수 프로그램 설치\n\n## 1.1. apt repository 업데이트\n```\nsudo apt-get update\n```\n\n## 1.2. 파이썬 Repo 설치\n```\nsudo add-apt-repository -y ppa:deadsnakes/ppa\n```\n\n## 1.3. 파이썬 설치 3.10\n```\nsudo apt-get install -y python3.10\n```\n\n## 1.4. PIP 설치\n```\nsudo apt install -y python3-pip\n```\n\n## 1.5. 파이썬 가상환경 설치\n```\nsudo apt install -y python3.10-venv\n```\n\n## 1.6. 마리아 DB 설치\n```\nsudo apt install -y mariadb-server-10.6\nsudo apt install -y libmysqlclient-dev\n```\n\n## 1.7. 레디스 서버 설치\n```\nsudo apt install -y redis-server\n```\n\n## 1.8. Nodejs 설치\n```\ncurl -s https://deb.nodesource.com/setup_18.x | sudo bash\nsudo apt-get install -y nodejs\n```\n## 1.9. Yarn 패키지 관리자 설치\n```\ncurl -sL https://dl.yarnpkg.com/debian/pubkey.gpg | gpg --dearmor | sudo tee /usr/share/keyrings/yarnkey.gpg >/dev/null\necho \"deb [signed-by=/usr/share/keyrings/yarnkey.gpg] https://dl.yarnpkg.com/debian stable main\" | sudo tee /etc/apt/sources.list.d/yarn.list\nsudo apt-get update && sudo apt-get install yarn\n```\n\n## 1.10. nginx 및 supervisor 설치\n```\nsudo apt install nginx supervisor\n```\n\n## 1.11. gunicorn wsgi gateway 인터페이스 서버설치\n```\npip install gunicorn\n```\n\n## 1.12. PDF 변환용 모듈 설치\n```\nsudo apt-get install -y xvfb libfontconfig wkhtmltopdf poppler-utils\n```\n\n## 1.13. frappe-bench 설치\n```\nsudo pip install frappe-bench\n```\n\n# 2. 프로그램 설정\n\n## 2.1. Maria DB 설정\n\n### 서버 설정\nunicode 사용으로 변경\n\n> sudo nano /etc/mysql/mariadb.conf.d/50-server.cnf\n```\n[mysqld] \ncharacter-set-client-handshake = FALSE\ncharacter-set-server=utf8mb4\ncollation-server=utf8mb4_unicode_ci\n```\n\n> sudo nano /etc/mysql/mariadb.conf.d/50-mysql-clients.cnf\n```\ndefault-character-set = utf8mb4\n```\n\n### DB 시작\n> sudo /etc/init.d/mariadb start \n> sudo mysql_secure_installation\n``` \n1. root password : Root 비밀번호 입력\n2. unix_socket : N 입력\n3. root password : Y or N 선택 입력\n4. remove anonymous users : Y 입력\n5. disallow root login remotely : Y or N 선택 입력\n6. remove test db : Y 입력\n7. reload privilege tables : Y 입력\n```\n\n### DB 재시작\n```\nsudo /etc/init.d/mariadb restart\nsudo /etc/init.d/mariadb status\n```\n\n### DB 비번 변경시 (참고)\n```\nsudo service mariadb start --skip-grant-tables --skip-networking\nsudo mysql -u root\nALTER USER 'root'@'localhost' IDENTIFIED BY '새 비밀번호';\nFLUSH PRIVILEGES;\n```\n\n## 2.2. frappe-bench 초기화\n```\nbench init frappe-bench\n```\n\n## 2.3 Supervisor 설정\n\n### 설정 링크 생성\n\n```\ncd ~/frappe-bench\nbench setup supervisor --yes\nsudo ln -s `pwd`/config/supervisor.conf /etc/supervisor/conf.d/frappe-bench.conf\n```\n\n### 서비스 등록\n```\nsudo systemctl enable supervisor\n```\n\n## 2.4. Nginx 설정\n\n### 설정파일 생성 및 링크 생성\n```\ncd ~/frappe-bench\nbench setup nginx\nsudo ln -s `pwd`/config/nginx.conf /etc/nginx/conf.d/frappe-bench.conf\n```\n\n### 서비스 등록\n```\nsudo systemctl reload nginx\n```\n> 파일 검증 : sudo nginx -t\n\n\n## 2.5 Redis 설정\n\n> /etc/sysctl.conf\n```\nvm.overcommit_memory = 1\n```\n\n\n# 3. 앱 생성 및 사이트 등록\n\n## 3.1 새 앱 생성\n```\nbench new-app 앱명\n```\n\n## 3.2 새 사이트 생성\n```\nbench new-site 사이트명\n```\n\n## 3.3 기본 사이트 등록\n```\nbench use 사이트명\n```\n## 3.5 사이트에 앱 설치\n```\nbench --site [사이트명] install-app [설치할 앱이름]\n```\n\n## 3.4 개발 모드로 실행 \n```\nbench start\n```\n\n# 5. ODBC 및 FreeDTS 설치\n```\nsudo apt-get install -y unixodbc unixodbc-dev libodbc1 odbcinst1debian2 tdsodbc\nsudo apt-get install -y freetds-bin freetds-common freetds-dev libct4 libsybdb5\n```\n\n## 4.1. ODBC 설정\n\n> /etc/odbcinst.ini\n\n```\n[ODBC]\nTrace=No\nTraceFile=/tmp/odbc.log\n\n[MariaDB Unicode]\nDriver=libmaodbc.so\nDescription=MariaDB Connector/ODBC(Unicode)\nThreading=0\nUsageCount=1\n\n[FreeTDS]\nDescription=FreeTDS\nDriver=/usr/lib/x86_64-linux-gnu/odbc/libtdsodbc.so\nUsageCount=1\n```\n\n## 4.2 DSN 설정 (사용시)\n> /etc/odbc.ini\n```\n[MSSQL]\nDescription=MSSQL Connect on FreeTDS\nDriver=FreeTDS\nServer=[서버 주소]\nPort=[서버포트]\nDatabase=[DB명]\nTrace=yes\nTraceFile=/tmp/mssql.log\nUserName=[아이디]\nPassword=[비밀번호]\n```\n\n# 5. 기타\n\n## 5.1 Production Mode 설정\n모든 설정이 완료된 상태에서 실행하면 사이트에 대한 nginx 설정파일 갱신되며, site-enabled의 default 링크는 삭제됨\n```\nsudo bench setup production [사용자]\n```\n\n## 5.2 홈 권한 설정\nProduction 모드 설정 후 Assets 디렉토리에 접근이 안 될 경우 home user 폴더 권한 설정 변경(Others 실행추가)\n```\nsudo chmod 701 /home/[사용자]\n```\n\n## 5.3 sudo 유저 추가, NoPasswd 설정\n```\nsudo usermod -aG sudo [사용자]\nsudo passwd [사용자]\necho \"$USER ALL=(ALL:ALL) NOPASSWD: ALL\" | sudo tee /etc/sudoers.d/$USER\n```\n\n## 5.4 폰트 설치\n레포트를 PDF로 출력할 때 한글 깨짐이 발생하는 경우 한글 폰트 설치\n```\nfont_master.zip 파일에서 /etc/fonts와 /usr/share/fonts 폴더를 변경 할 것\u0013\n\n```\n\n## 5.5 Frappe 캐시 삭제\nbench console에서 아래 명령어 실행\n```\nfrappe.cache().flushall()\n```\n"},{"excerpt":"Git 기본 명령어 기본 용어 설명 Git에서는 아래 3개의 Tree(트리) 데이터를 이용하여 버전 관리를 수행 함\n HEAD(헤드) : 마지막 커밋 스냅 샷, 다음 커밋의 부모 커밋\n Index(인덱스) : 다음에 커밋 할 스냅 샷, Staging Area에 저장.\n Working Directory(작업 디렉토리) : 샌드박스\n Git Directory…","fields":{"slug":"/git-command/"},"frontmatter":{"date":"October 21, 2023","title":"Git 기본 사용법","tags":["git"]},"rawMarkdownBody":"\n## Git 기본 명령어\n- 기본 용어 설명\n> Git에서는 아래 3개의 Tree(트리) 데이터를 이용하여 버전 관리를 수행 함\n<br/> HEAD(헤드) : 마지막 커밋 스냅 샷, 다음 커밋의 부모 커밋\n<br/> Index(인덱스) : 다음에 커밋 할 스냅 샷, Staging Area에 저장.\n<br/> Working Directory(작업 디렉토리) : 샌드박스\n<br/> Git Directory : Git 로컬 저장소, Staging Area와 커밋 데이터의 영구 저장공간\n\n```\ngit init\n```\n폴더에 Git Directory를 생성, .git 폴더가 생성됨\n\n```\ngit status\n```\ngit의 저장소 트리 상태에 대한 비교 정보를 출력, 작업 디렉토리와 인덱스, 인덱스와 헤드를 비교하여 출력함.\n<br> 작업 디렉토리와 인덱스와의 차이는 빨간색으로, 인덱스와 헤드와의 차이는 녹색으로 표시됨\n\n```\n.gitignore\n```\n현재 작업 디렉토리에서 관리할 필요가 없는 파일 혹은 폴더 정보를 설정, 해당 파일에 포함된 대상은 버전 관리에서 제외됨\n(static 파일, node 등 library 공통모듈 등)\n\n```\ngit add -A or git add .\n```\n작업 디렉토리의 변경 내용으로 인덱스 트리에 반영(스냅 샷)\u0013\n\n```\ngit commit\n```\n인덱스 트리에 등록된 내용을 저장소에 영구적으로 저장하고 헤드가 해당 스냅샷을 가르키게 됨.\n> -m \"코멘트\" : 텍스트 편집기를 사용하지 않고 커밋 코멘트 추가\n<br/> --amend : 마지막 커밋 내용에 현재 수정 사항 반영\n\n```\ngit reset --mixed HEAD~ or [hash값]\n```\n헤드가 가리키는 커밋 포인터를 이동 시킨 후(롤백), 인덱스의 스냅 샷을 헤드가 가리키는 커밋으로 업데이트 함. git commit과 git add 명령을 롤백\u0013 \n> --mixed : 플래그가 없는 경우 기본 동작\n<br/> --soft : 헤드의 포인터만 이동시키고 인덱스 스냅샷을 업데이트 하지는 않음\n<br/> --hard : 워킹 디렉토리의 내용까지 업데이트, 커밋하지 않은 모든 내용 삭제됨 (주의~)\n<br/> HEAD^ : 최신 커밋, HEAD~n : n번째 커밋으로 롤백\n<br/> hash값 : 해시 값에 해당하는 특정 커밋으로 롤백\n\n```\ngit revert hash\n```\n특정 커밋으로 되돌리는 명령어, 커밋 취소에 대한 이력이 추가 됨, 원격 저장소에 커밋 후 푸시된 내용을 취소시 협업 중인 경우 revert로 실행. 로컬에서만 취소하는 경우 reset 사용\n\n```\ngit log\n```\n커밋 관련 로그 표시, 현재 HEAD와 브랜 커밋 정보 표시\n> -p : 수정된 전체 내용 확인\n\n```\ngit diff\n```\n두 트리 개체의 차이 비교\n> \n\n```\ngit rebase -i HEAD~n # HEAD 에서부터 n 번째 커밋 수정\n```\n여러개의 커밋 메시지 수정\n\n\n## 브랜치 관리\n\n```\ngit branch\n```\n로컬 브랜치 정보 출력, 브랜치 이름 앞에 * 표시된 브랜치가 checkout된 브랜치 임\n> -r : 원격 브랜치 정보 확인\u0013\n<br/> -a : 로컬 및 원격 브랜치 전체 확인 \n\n```\ngit branch [branch명]\n```\n새로운 브랜치 생성\n\n```\ngit branch -d [branch명]\n```\n해당 브랜치 삭제\n> -D : 강제 삭제 플래그, 병합하지 않은 브랜치도 삭제 가능\n\n```\ngit checkout [branch명]\n```\n현재 작업 폴더를 해당 브랜치로 전환\n> -b : 브랜치 생성과 함께 해당 브랜치로 전환\n<br/> -t origin/[브랜치명] : 원격 브랜치를 가져와서 로컬 브랜치를 생성후 전환\n\n```\ngit merge [branch명]\n```\n지정한 브랜치와 현재 브랜치를 병합함\n\n\n## 임시 저장\n\n```\ngit stash\n```\n현재 작업 중인 변경사항을 커밋하지 않고 저장\n```\ngit stash list\n```\nstash 했던 목록을 표시함\n```\ngit stash drop [stash명]\n```\n저장한 stash를 삭제, 목록에 표시된 stash 중에 삭제 할 stash를 지정 \n\n\n## 원격 저장소 관련\n\n- 기본 용어 설명\n\n> Remote branch : 원격 저장소의 브랜치 \n<br/> Remote Tracking breanch : 원격 저장소의 브랜치를 참조하는 원격 브랜치의 복사본, 로컬 저장소에 위치 (origin/main)\n<br/> Tracking branch : 로컬 브랜치중에 원격 브랜치를 추적하는 브랜치\n\n```\ngit remote add origin https://github.com/[계정정보]/[저장소명]\n```\n원격 저장소를 설치하고 설치된 정보로 위 명령어 실행\n\n```\ngit remote -v\n```\n현재 설정된 원격 저장소 정보 확인\n\n```\ngit branch --set-upstream-to=[원격트래킹 브랜치]\ngit branch -u [원격트래킹 브랜치]\n```\n현재 브랜치를 원격 트래킹 브랜치와 매핑 함.\n\n```\ngit push or git push origin [저장소명]\n```\n\n원격 저장소를 현재 브랜치로 업데이트 함.\n>-f : 강제 업데이트\n\n```\ngit push origin :[브랜치명]\n```\n\n원격 브랜치 삭제\n\n```\ngit remote update\n```\n모든 원격 저장소의 원격 참조 브랜치를 업데이트함. \n> -p : 참조되지 않은 사항 삭제\n\n```\ngit fetch\n```\n현재 로컬에 위치한 브랜치가 참조하는 원격 저장소의 모든 원격 참조 브랜치 정보를 업데이트 함.\n> -p : 참조되지 않은 사항 삭제 \n<br/> --all : 모든 원격 저장소의 브랜치 정보를 업데이트\n<br/> * 원격 저장소에 있는 브랜치를 로컬에도 자동 생성, 단, 커밋 내용은 병합하지 않음\n\n```\ngit pull\n```\n원격 저장소의 내용을 업데이트하고 로컬 저장소에 변동 사항을 병합함, git fetch + git merge\n\n```\ngit clone [원격저장소주소] [저장위치]\n```\n원격 저장소를 로컬에 복제"}]}},"pageContext":{}},"staticQueryHashes":[],"slicesMap":{}}